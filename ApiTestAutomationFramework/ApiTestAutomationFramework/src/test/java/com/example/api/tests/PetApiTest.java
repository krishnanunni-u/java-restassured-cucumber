package com.example.api.tests;

import com.example.api.client.ApiClient;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.Matchers.equalTo;

public class PetApiTest {

    private static final String BASE_URL = "https://petstore.swagger.io/v2"; // Base URI for the API
    private static final String PET_ID = "1"; // Example pet ID for testing
    private ApiClient apiClient;

    @BeforeEach
    public void setUp() {
        apiClient = new ApiClient(BASE_URL);
    }

    @Test
    public void testGetPetById() {
        Response response = apiClient.get("/pet/" + PET_ID, new HashMap<>());

        response.then()
                .statusCode(200)
                .body("id", equalTo(Integer.parseInt(PET_ID))); // Validate the pet ID
    }

    @Test
    public void testAddPet() {
        Map<String, Object> petData = createPetData("doggie", "available");

        Map<String, String> headers = new HashMap<>();
        headers.put("Content-Type", "application/json");

        Response response = apiClient.post("/pet", headers, petData);

        response.then()
                .log().all()
                .statusCode(200)
                .body("name", equalTo("doggie")) // Validate the pet name
                .body("status", equalTo("available")); // Validate the pet status
    }

    @Test
    public void testDeletePet() {
        Response response = apiClient.delete("/pet/" + PET_ID, new HashMap<>());

        response.then()
                .statusCode(200); // Validate successful deletion
    }

    private Map<String, Object> createPetData(String name, String status) {
        Map<String, Object> petData = new HashMap<>();
        petData.put("id", 0); // The ID will be generated by the server in a real scenario
        petData.put("name", name);
        petData.put("status", status);

        // Category
        Map<String, Object> category = new HashMap<>();
        category.put("id", 0);
        category.put("name", "string");
        petData.put("category", category);

        // Photo URLs
        petData.put("photoUrls", Collections.singletonList("string"));

        // Tags
        Map<String, Object> tag = new HashMap<>();
        tag.put("id", 0);
        tag.put("name", "string");
        petData.put("tags", Collections.singletonList(tag));

        return petData;
    }
}
